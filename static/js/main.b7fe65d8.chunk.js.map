{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/useSubstrate.js","substrate-lib/components/DeveloperConsole.js","substrate-lib/components/TxButton.js","AccountSelector.js","Balances.js","BlockNumber.js","ChainState.js","Events.js","Extrinsics.js","Metadata.js","NodeInfo.js","TemplateModule.js","Transfer.js","Upgrade.js","index.js","App.js"],"names":["config","require","INIT_STATE","socket","PROVIDER_SOCKET","types","CUSTOM_TYPES","keyring","keyringState","api","apiState","reducer","state","action","type","payload","Error","SubstrateContext","React","createContext","useSubstrate","useContext","dispatch","connect","useCallback","a","provider","WsProvider","ApiPromise","create","_api","isReady","console","log","loadAccounts","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","useEffect","DeveloperConsole","props","window","util","util_crypto","TxButton","accountPair","label","setStatus","style","attrs","disabled","params","sudo","tx","isQuery","transaction","isInjected","web3FromSource","injected","fromParam","setSigner","signer","txExecute","e","error","toString","signAndSend","status","isFinalized","asFinalized","catch","query","result","Button","primary","onClick","NodeInfo","setAccountAddress","useState","accountSelected","setAccountSelected","accountBalance","setAccountBalance","keyringOptions","getPairs","account","key","value","text","toUpperCase","icon","initialAddress","length","unsubscribe","balances","freeBalance","balance","then","unsub","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","Label","pointing","Balances","accounts","setBalances","addresses","unsubscribeAll","multi","currentBalances","balancesMap","reduce","acc","index","Grid","Column","Table","celled","striped","Body","Row","Cell","textAlign","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","number","toNumber","timer","time","id","setInterval","clearInterval","Card","Content","Statistic","extra","ChainState","modulesList","setModulesList","storageItemsList","setStorageItemsList","module","storageItem","input","formState","setFormState","modules","Object","keys","sort","storageItems","storage","data","Form","Field","fluid","Input","overflowWrap","Events","eventFeed","setEventFeed","filter","system","events","forEach","record","event","phase","typeDef","eventName","section","method","includes","feedEvent","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","Extrinsics","callableFunctionList","setCallableFunctionList","callableFunction","callableFunctions","callable","Metadata","version","metadata","setMetadata","rpc","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","href","ProofOfExistence","fileReader","digest","setDigest","owner","setOwner","block","setBlock","bufferToDigest","Array","from","Uint8Array","b","padStart","hash","blake2AsHex","isClaimed","templateModule","proofs","success","warning","file","target","files","FileReader","onloadend","readAsArrayBuffer","Message","header","list","createClaim","revokeClaim","Transfer","addressTo","amount","prevState","transfer","Upgrade","proposal","setProposal","handleFileRead","buffer","newProposal","setCode","accept","ReactDOM","render","initState","useReducer","Provider","children","accountAddress","getPair","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","stackable","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.b7fe65d8.chunk.js","sourcesContent":["const configCommon = require('./common.json');\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\nconst config = { ...configCommon, ...configEnv };\n\nexport default config;\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../config';\n\nconst INIT_STATE = {\n  socket: config.PROVIDER_SOCKET,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state, socket, api: null, apiState: null };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <SubstrateContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SubstrateContext.Provider>\n  );\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nexport { SubstrateContext, SubstrateContextProvider };\n","import { useContext, useEffect, useCallback } from 'react';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\nimport { SubstrateContext } from './SubstrateContext';\n\nconst useSubstrate = () => {\n  const [state, dispatch] = useContext(SubstrateContext);\n\n  // `useCallback` so that returning memoized function and not created\n  //   everytime, and thus re-render.\n  const { api, socket, types } = state;\n  const connect = useCallback(async () => {\n    if (api) return;\n\n    const provider = new WsProvider(socket);\n\n    try {\n      const _api = await ApiPromise.create({ provider, types });\n      dispatch({ type: 'CONNECT', payload: _api });\n      await _api.isReady;\n      dispatch({ type: 'CONNECT_SUCCESS' });\n    } catch (e) {\n      console.log(e);\n      dispatch({ type: 'CONNECT_ERROR' });\n    }\n  }, [api, socket, types, dispatch]);\n\n  // hook to get injected accounts\n  const { keyringState } = state;\n  const loadAccounts = useCallback(async () => {\n    // Ensure the method only run once.\n    if (keyringState) return;\n\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.log(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  }, [keyringState, dispatch]);\n\n  useEffect(() => {\n    connect();\n  }, [connect]);\n\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n\n  return { ...state, dispatch };\n};\n\nexport default useSubstrate;\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api } = useSubstrate();\n  window.api = api;\n  window.util = require('@polkadot/util');\n  window.util_crypto = require('@polkadot/util-crypto');\n  window.keyring = require('@polkadot/keyring');\n\n  return null;\n}\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\n\nexport default function TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  style = null,\n  type = null,\n  attrs = null,\n  disabled = false\n}) {\n  const { api } = useSubstrate();\n  const { params = null, sudo = false, tx = null } = attrs;\n  const isQuery = () => type === 'QUERY';\n\n  const transaction = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    // set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus('Sending...');\n\n    let txExecute;\n    try {\n      // Check if tx has params\n      if (!params) {\n        txExecute = !sudo ? tx() : tx.sudo();\n      } else {\n        txExecute = !sudo ? tx(...params) : tx.sudo(...params);\n      }\n    } catch (e) {\n      console.error('ERROR forming transaction:', e);\n      setStatus(e.toString());\n    }\n\n    if (txExecute) {\n      txExecute\n        .signAndSend(fromParam, ({ status }) => {\n          status.isFinalized\n            ? setStatus(\n                `Completed at block hash #${status.asFinalized.toString()}`\n            )\n            : setStatus(`Current transaction status: ${status.type}`);\n        })\n        .catch(e => {\n          setStatus(':( transaction failed');\n          console.error('ERROR transaction:', e);\n        });\n    }\n  };\n\n  const query = async () => {\n    try {\n      const result = await tx(...params);\n      setStatus(result.toString());\n    } catch (e) {\n      console.error('ERROR query:', e);\n      setStatus(e.toString());\n    }\n  };\n\n  return (\n    <Button\n      primary\n      style={style}\n      type='submit'\n      onClick={isQuery() ? query : transaction}\n      disabled={disabled || !tx || (!isQuery() && !accountPair)}\n    >\n      {label}\n    </Button>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n  Label\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function NodeInfo (props) {\n  const { api, keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n  const [accountBalance, setAccountBalance] = useState(0);\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    // If the user has selected an address, create a new subscription\n    accountSelected &&\n      api.query.balances.freeBalance(accountSelected, balance => {\n        setAccountBalance(balance.toString());\n      }).then(unsub => {\n        unsubscribe = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src='Substrate-Logo.png' size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Icon\n            name='users'\n            size='large'\n            circular\n            color={accountSelected ? 'green' : 'red'}\n          />\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => { onChange(dropdown.value); }}\n            value={accountSelected}\n          />\n          {api.query.balances && accountSelected\n            ? <Label pointing='left'>\n              <Icon\n                name='money bill alternate'\n                color={accountBalance > 0 ? 'green' : 'red'}\n              />\n              {accountBalance}\n            </Label>\n            : ''}\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Table, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Balances (props) {\n  const { api, keyring } = useSubstrate();\n  const accounts = keyring.getPairs();\n  const [balances, setBalances] = useState({});\n\n  useEffect(() => {\n    const addresses = keyring.getPairs().map(account => account.address);\n    let unsubscribeAll = null;\n\n    api.query.balances.freeBalance\n      .multi(addresses, currentBalances => {\n        const balancesMap = addresses.reduce(\n          (acc, address, index) => ({\n            ...acc, [address]: currentBalances[index].toString()\n          }), {});\n        setBalances(balancesMap);\n      }).then(unsub => {\n        unsubscribeAll = unsub;\n      }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [api.query.balances.freeBalance, setBalances, keyring]);\n\n  return (\n    <Grid.Column>\n      <h1>Balances</h1>\n      <Table celled striped size='small'>\n        <Table.Body>{accounts.map(account =>\n          <Table.Row key={account.address}>\n            <Table.Cell textAlign='right'>{account.meta.name}</Table.Cell>\n            <Table.Cell>{account.address}</Table.Cell>\n            <Table.Cell>{balances && balances[account.address]}</Table.Cell>\n          </Table.Row>\n        )}\n        </Table.Body>\n      </Table>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block Number'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='time' /> {blockNumberTimer}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function ChainState (props) {\n  const { api } = useSubstrate();\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(null);\n  const [storageItemsList, setStorageItemsList] = useState([]);\n\n  const initialState = {\n    module: '',\n    storageItem: '',\n    input: ''\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { module, storageItem, input } = formState;\n\n  useEffect(() => {\n    const modules = Object.keys(api.query).sort().map(module => ({\n      key: module,\n      value: module,\n      text: module\n    }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== '') {\n      const storageItems = Object.keys(api.query[module]).sort().map(storage => ({\n        key: storage,\n        value: storage,\n        text: storage\n      }));\n\n      setStorageItemsList(storageItems);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Chain State</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a module to query'\n            fluid\n            label='Module'\n            onChange={onChange}\n            search\n            selection\n            state='module'\n            options={modulesList}\n            value={module}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a storage item to query'\n            fluid\n            label='Storage Item'\n            onChange={onChange}\n            search\n            selection\n            state='storageItem'\n            options={storageItemsList}\n            value={storageItem}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Input'\n            fluid\n            placeholder='May not be needed'\n            state='input'\n            type='text'\n            value={input}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            label='Query'\n            setStatus={setStatus}\n            type='QUERY'\n            attrs={{\n              params: [input],\n              tx: (api.query[module] && api.query[module][storageItem])\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        const eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        const params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          const feedEvent = {\n            icon: 'bell',\n            date: 'X Blocks Ago',\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: 'auto', maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Extrinsics (props) {\n  const { api } = useSubstrate();\n  const [modulesList, setModulesList] = useState([]);\n  const [status, setStatus] = useState(null);\n  const [callableFunctionList, setCallableFunctionList] = useState([]);\n  const { accountPair } = props;\n\n  const [formState, setFormState] = useState({\n    module: '',\n    callableFunction: '',\n    input: ''\n  });\n  const { module, callableFunction, input } = formState;\n\n  useEffect(() => {\n    const modules = Object.keys(api.tx)\n      .sort()\n      .map(module => ({\n        key: module,\n        value: module,\n        text: module\n      }));\n\n    setModulesList(modules);\n  }, [api]);\n\n  useEffect(() => {\n    if (module !== '') {\n      const callableFunctions = Object.keys(api.tx[module])\n        .sort()\n        .map(callable => ({\n          key: callable,\n          value: callable,\n          text: callable\n        }));\n\n      setCallableFunctionList(callableFunctions);\n    }\n  }, [api, module]);\n\n  const onChange = (_, data) =>\n    setFormState(formState => ({ ...formState, [data.state]: data.value }));\n\n  return (\n    <Grid.Column>\n      <h1>Extrinsics</h1>\n      <Form>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a module to call'\n            fluid\n            label='Module'\n            onChange={onChange}\n            search\n            selection\n            state='module'\n            options={modulesList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            placeholder='Select a function to call'\n            fluid\n            label='Callable Function'\n            onChange={onChange}\n            search\n            selection\n            state='callableFunction'\n            options={callableFunctionList}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Input'\n            fluid\n            placeholder='May not be needed'\n            state='input'\n            type='text'\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Call'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: input ? [input] : null,\n              tx: api.tx[module] && api.tx[module][callableFunction]\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta><span>v{metadata.version}</span></Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre><code>{JSON.stringify(metadata.data, null, 2)}</code></pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","// React and Semantic UI elements.\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Grid, Message } from 'semantic-ui-react';\n// Pre-built Substrate front-end utilities for connecting to a node\n// and making a transaction.\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n// Polkadot-JS utilities for hashing data.\nimport { blake2AsHex } from '@polkadot/util-crypto';\n\n// Our main Proof Of Existence Component which is exported.\nexport default function ProofOfExistence (props) {\n  // Establish an API to talk to our Substrate node.\n  const { api } = useSubstrate();\n  // Get the \"selected user\" from the `AccountSelector` component.\n  const { accountPair } = props;\n  // React hooks for all the state variables we track.\n  // Learn more at: https://reactjs.org/docs/hooks-intro.html\n  const [status, setStatus] = useState('');\n  const [digest, setDigest] = useState('');\n  const [owner, setOwner] = useState('');\n  const [block, setBlock] = useState(0);\n\n  // Our `FileReader()` which is accessible from our functions below.\n  let fileReader;\n\n  // Takes our file, and creates a digest using the Blake2 256 hash function.\n  const bufferToDigest = () => {\n    // Turns the file content to a hexadecimal representation.\n    const content = Array.from(new Uint8Array(fileReader.result))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  };\n\n  // Callback function for when a new file is selected.\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  // React hook to update the \"Owner\" and \"Block Number\" information for a file.\n  useEffect(() => {\n    let unsubscribe;\n\n    // Polkadot-JS API query to the `proofs` storage item in our module.\n    // This is a subscription, so it will always get the latest value,\n    // even if it changes.\n    api.query.templateModule\n      .proofs(digest, result => {\n        // Our storage item returns a tuple, which is represented as an array.\n        setOwner(result[0].toString());\n        setBlock(result[1].toNumber());\n      })\n      .then(unsub => {\n        unsubscribe = unsub;\n      });\n\n    return () => unsubscribe && unsubscribe();\n  // This tells the React hook to update whenever the file digest changes\n  // (when a new file is chosen), or when the storage subscription says the\n  // value of the storage item has updated.\n  }, [digest, api.query.templateModule]);\n\n  // We can say a file digest is claimed if the stored block number is not 0.\n  function isClaimed () {\n    return block !== 0;\n  }\n\n  // The actual UI elements which are returned from our component.\n  return (\n    <Grid.Column>\n      <h1>Proof Of Existence</h1>\n      {/* Show warning or success message if the file is or is not claimed. */}\n      <Form success={!!digest && !isClaimed()} warning={isClaimed()}>\n        <Form.Field>\n          {/* File selector with a callback to `handleFileChosen`. */}\n          <Input\n            type='file'\n            id=\"file\"\n            label=\"Your File\"\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n          {/* Show this message if the file is available to be claimed */}\n          <Message success header=\"File Digest Unclaimed\" content={digest} />\n          {/* Show this message if the file is already claimed. */}\n          <Message\n            warning\n            header=\"File Digest Claimed\"\n            list={[digest, `Owner: ${owner}`, `Block: ${block}`]}\n          />\n        </Form.Field>\n        {/* Buttons for interacting with the component. */}\n        <Form.Field>\n          {/* Button to create a claim. Only active if a file is selected,\n          and not already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label={'Create Claim'}\n            setStatus={setStatus}\n            type=\"TRANSACTION\"\n            attrs={{ params: [digest], tx: api.tx.templateModule.createClaim }}\n            disabled={isClaimed() || !digest}\n          />\n          {/* Button to revoke a claim. Only active if a file is selected,\n          and is already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label=\"Revoke Claim\"\n            setStatus={setStatus}\n            type=\"TRANSACTION\"\n            attrs={{ params: [digest], tx: api.tx.templateModule.revokeClaim }}\n            disabled={!isClaimed() || owner !== accountPair.address}\n          />\n        </Form.Field>\n        {/* Status message about the transaction. */}\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Transfer (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\n  const { accountPair } = props;\n\n  const onChange = (_, data) =>\n    setFormState(prevState => ({ ...formState, [data.state]: data.value }));\n\n  const { addressTo, amount } = formState;\n\n  return (\n    <Grid.Column>\n      <h1>Transfer</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            fluid label='To' type='text' placeholder='address'\n            state='addressTo' onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Input\n            fluid label='Amount' type='number'\n            state='amount' onChange={onChange}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Send'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [addressTo, amount],\n              tx: api.tx.balances.transfer\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, Input, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Upgrade (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState('');\n  const [proposal, setProposal] = useState({});\n  const { accountPair } = props;\n\n  let fileReader;\n\n  const bufferToHex = buffer => {\n    return Array.from(new Uint8Array(buffer))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  };\n\n  const handleFileRead = e => {\n    const content = bufferToHex(fileReader.result);\n    const newProposal = api.tx.system.setCode(`0x${content}`);\n    setProposal(newProposal);\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Upgrade Runtime</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            type='file'\n            id='file'\n            label='Wasm File'\n            accept='.wasm'\n            onChange={e => handleFileChosen(e.target.files[0])}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Upgrade'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [proposal],\n              sudo: true,\n              tx: api.tx.sudo\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { SubstrateContextProvider } from './substrate-lib';\n\nReactDOM.render(\n  // More information on custom types: http://bit.ly/2kHYvLc\n  <SubstrateContextProvider>\n    <App />\n  </SubstrateContextProvider>,\n  document.getElementById('root')\n);\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\nimport AccountSelector from './AccountSelector';\nimport Balances from './Balances';\nimport BlockNumber from './BlockNumber';\nimport ChainState from './ChainState';\nimport Events from './Events';\nimport Extrinsics from './Extrinsics';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\nimport TemplateModule from './TemplateModule';\nimport Transfer from './Transfer';\nimport Upgrade from './Upgrade';\n\nexport default function App () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text => (\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>\n  );\n\n  if (apiState === 'ERROR') return loader('Error connecting to the blockchain');\n  else if (apiState !== 'READY') return loader('Connecting to the blockchain');\n\n  if (keyringState !== 'READY') {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Balances />\n          </Grid.Row>\n          <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row>\n            <Extrinsics accountPair={accountPair} />\n            <ChainState />\n            <Events />\n          </Grid.Row>\n          <Grid.Row>\n            {\n              api.query.templateModule && api.query.templateModule.proofs &&\n              <TemplateModule accountPair={accountPair} />\n            }\n            {\n              api.query.templateModule && !api.query.templateModule.proofs &&\n              <h1> Proof of Existence not found 😔 </h1>\n            }\n          </Grid.Row>\n        </Grid>\n        <DeveloperConsole />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}